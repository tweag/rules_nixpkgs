# Replace with http_archive: https://github.com/tweag/rules_nixpkgs/#setup
local_repository(
    name = "io_tweag_rules_nixpkgs",
    path = "../../../",
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# https://bazelbuild.github.io/rules_rust/#setup
http_archive(
    name = "rules_rust",
    sha256 = "f1306aac0b258b790df01ad9abc6abb0df0b65416c74b4ef27f4aab298780a64",
    urls = [
        "https://github.com/bazelbuild/rules_rust/releases/download/0.56.0/rules_rust-0.56.0.tar.gz",
    ],
)

load("@io_tweag_rules_nixpkgs//nixpkgs:repositories.bzl", "rules_nixpkgs_dependencies")

rules_nixpkgs_dependencies()

load("@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl", "nixpkgs_git_repository", "nixpkgs_local_repository", "nixpkgs_package")

# It is recommended to keep nixpkgs of nix-shell (which provide Bazel),
# and nixpkgs of Bazel Workspace in sync - otherwise one may
# got hit with nasty glibc mismatch errors.
nixpkgs_local_repository(
    name = "nixpkgs",
    nix_file = "//:nixpkgs.nix",
    nix_file_deps = [
        "//:nixpkgs.json"
    ],
)

# rules_rust also uses the cc compiler
load("@io_tweag_rules_nixpkgs//nixpkgs:nixpkgs.bzl", "nixpkgs_cc_configure")

nixpkgs_cc_configure(
    name = "nixpkgs_config_cc",
    repository = "@nixpkgs",
    nix_file_deps = [
        "//:nixpkgs.json"
    ],
)

load("@io_tweag_rules_nixpkgs//nixpkgs:toolchains/rust.bzl", "nixpkgs_rust_configure", "nixpkgs_rust_wasm_configure")

nixpkgs_rust_configure(
    repository = "@nixpkgs",
    name = "nix_rust",
    nix_file_deps = [
        "//:nixpkgs.json"
    ],
)

nixpkgs_rust_wasm_configure(
    repository = "@nixpkgs",
    name = "nix_wasm_rust",
    nix_file_deps = [
        "//:nixpkgs.json"
    ],
)

nixpkgs_package(
    name = "openssl-static",
    repository = "@nixpkgs",
    nix_file = "//:openssl-static.nix",
    nix_file_deps = [
        "//:nixpkgs.json"
    ],
)

load("@rules_rust//rust:repositories.bzl", "rules_rust_dependencies")

rules_rust_dependencies()

load("@rules_rust//wasm_bindgen:repositories.bzl", "rust_wasm_bindgen_dependencies", "rust_wasm_bindgen_register_toolchains")

rust_wasm_bindgen_dependencies()

rust_wasm_bindgen_register_toolchains()


# crate_universe as a way of governing deps
load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies(
    rust_toolchain_cargo_template = "@nix_rust//:bin/{tool}",
    rust_toolchain_rustc_template = "@nix_rust//:bin/{tool}",
)

load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_repository", "render_config")

OPENSSL_ENV_VARS = {
        "OPENSSL_INCLUDE_DIR": "../openssl-static/include",
        "OPENSSL_LIB_DIR": "../openssl-static/lib",
        "OPENSSL_STATIC": "1",
}
OPENSSL_CRATE_ANNOTATION = crate.annotation(
        build_script_env = OPENSSL_ENV_VARS,
        build_script_data = [
            "@openssl-static//:include",
            "@openssl-static//:lib",
        ],
        data = ["@openssl-static//:lib"],
        rustc_flags = [
            "-Lexternal/openssl-static/lib",
        ],
)

# buildifier: disable=bzl-visibility
load("@rules_rust//crate_universe/private:urls.bzl", "CARGO_BAZEL_URLS", "CARGO_BAZEL_SHA256S")
load("@rules_rust//rust/platform:triple_mappings.bzl", "SUPPORTED_PLATFORM_TRIPLES")

crates_repository(
    name = "crate_index",
    # Ensure the caro openssl-sys crate
    # will use the openssl nixpkg.
    annotations = {
        "openssl-sys": [
            OPENSSL_CRATE_ANNOTATION
        ],
    },
    cargo_lockfile = "//:Cargo.lock",
    lockfile = "//:cargo-bazel-lock.json",
    packages = {
        "openssl": crate.spec(
            version = "0.10.40",
            features = [],
        ),
    },
    # rules_rust provides static binaries for linux, but does not use them by default
    generator_urls = CARGO_BAZEL_URLS | {
        "x86_64-unknown-linux-gnu": CARGO_BAZEL_URLS["x86_64-unknown-linux-musl"],
    },
    generator_sha256s = CARGO_BAZEL_SHA256S | {
        "x86_64-unknown-linux-gnu": CARGO_BAZEL_SHA256S["x86_64-unknown-linux-musl"],
    },
    render_config = render_config(
        default_package_name = "",
    ),
    rust_toolchain_cargo_template = "@nix_rust//:bin/{tool}",
    rust_toolchain_rustc_template = "@nix_rust//:bin/{tool}",
    # the `wasm32-wasip1` target is not supported by nix_rustc (or named differently)
    supported_platform_triples = [ triple for triple in SUPPORTED_PLATFORM_TRIPLES if triple != "wasm32-wasip1"],
)

load("@crate_index//:defs.bzl", "crate_repositories")

crate_repositories()
